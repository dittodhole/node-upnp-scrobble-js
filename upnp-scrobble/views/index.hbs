<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta charset="utf-8" />
  <title></title>
  <link rel="stylesheet" href="//fonts.googleapis.com/css?family=Roboto:300,300italic,700,700italic" />
  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/normalize/3.0.3/normalize.css" />
  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/milligram/1.0.3/milligram.min.css" />
  <style type="text/css">
    progress {
      -webkit-appearance: none;
      border: 1px solid #606c76;
    }

      progress::-webkit-progress-bar {
        background: transparent;
      }

      progress::-webkit-progress-value {
        opacity: 0.3;
        background-color: yellow;
      }

      progress.scrobbled::-webkit-progress-value {
        background-color: green;
      }
  </style>
  <script src="/socket.io/socket.io.js"></script>
  <script type="text/javascript" src="/knockout/dist/knockout.js"></script>
  <script type="text/javascript">
    'use strict';
    class Song {
      constructor(song) {
        this.timestamp = song.timestamp;
        this.durationInSeconds = song.durationInSeconds;
        this.positionInSeconds = song.positionInSeconds;
        this.albumArtURI = song.albumArtURI;
        this.track = song.track;
        this.artist = song.artist;
        this.album = song.album;
        this.actualTimestamp = ko.observable(Date.now());
        this.actualPositionInSeconds = ko.computed(() => {
          let result = this.positionInSeconds + (this.actualTimestamp() - this.timestamp) / 1000;

          return result;
        });
        this.positionInterval = window.setInterval(() => {
          this.actualTimestamp(Date.now());
        }, 1000);
        this.scrobbled = ko.pureComputed(() => {
          let scrobbleFactor = {{scrobbleFactor}};
          let scrobblePositionInSeconds = this.durationInSeconds * scrobbleFactor;
          let scrobbled = this.actualPositionInSeconds() >= scrobblePositionInSeconds;

          return scrobbled;
        })
      }
    }
    class Service {
      constructor(service) {
        this.serviceKey = service.serviceKey;
        this.deviceIcon = service.deviceIcon;
        this.deviceName = service.deviceName;
        this.deviceModelName = service.deviceModelName;
        this.song = ko.observable();
        let song = null;
        if (service.song
          && service.song.status == 'playing') {
          song = new Song(service.song);
        }
        this.song(song);
      }
    }
    class ViewModel {
      constructor() {
        this.services = ko.observableArray();
      }
      _getService(serviceKey) {
        var observableService = ko.utils.arrayFirst(this.services(), (item) => item.serviceKey == serviceKey);

        return observableService;
      }
      addService(service) {
        service = new Service(service);
        this.services.push(service);
      }
      removeService(serviceKey) {
        var service = this._getService(serviceKey);
        if (!service) {
          return;
        }

        this.services.remove(service);
      }
      setSong(serviceKey, song) {
        this.removeSong(serviceKey);

        let service = this._getService(serviceKey);
        if (!service) {
          return;
        }

        service.song(new Song(song));
      }
      removeSong(serviceKey) {
        let service = this._getService(serviceKey);
        if (!service) {
          return;
        }

        let song = service.song();
        if (song) {
          window.clearInterval(song.positionInterval);
          service.song(null);
        }
      }
    };

    let socket = io.connect();
    let viewModel = new ViewModel();

    window.onload = () => {
      ko.applyBindings(viewModel);
      socket.emit('getServices');
    };

    socket.on('message', (data) => {
      switch (data.type) {
        case 'getServicesResponse':
          ko.utils.arrayForEach(data.services, (service) => viewModel.addService(service));
          break;
        case 'serviceDiscovered':
          viewModel.addService(data.service);
          break;
        case 'serviceDisappeared':
          viewModel.removeService(data.serviceKey);
          break;
        case 'play':
          viewModel.setSong(data.serviceKey, data.song);
          break;
        case 'stop':
          viewModel.removeSong(data.serviceKey);
          break;
      }
    });
  </script>
</head>
<body class="container"
      style="margin-top: 10px;">
  <!-- ko foreach: services -->
  <div class="row">
    <div class="column">
      <div class="float-left">
        <img data-bind="attr: { src: deviceIcon }" />
      </div>
      <span data-bind="text: deviceName"
            style="font-weight: bold;"></span><br />
      <span data-bind="text: deviceModelName"></span><br />
    </div>
    <div class="column"
         style="text-align: right; position: relative;"
         data-bind="if: song() != null">
      <progress style="position: absolute; width: 300px; height: 300px;"
                data-bind="value: song().actualPositionInSeconds(), attr: { max: song().durationInSeconds }, css: { scrobbled: song().scrobbled }"></progress>
      <img style="width: 300px; height: 300px;"
           data-bind="attr: { src: song().albumArtURI }" /><br />
      <span style="font-weight: bold;"
            data-bind="text: song().track"></span><br />
      <span data-bind="text: song().artist"></span><br />
      <span style="font-size: small"
            data-bind="text: song().album, visible: song().album"></span>
    </div>
  </div>
  <!-- /ko -->
</body>
</html>
